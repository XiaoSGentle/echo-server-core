// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/super-sunshines/echo-server-core/vben/gorm/model"
)

func newSysUserThirdBind(db *gorm.DB, opts ...gen.DOOption) sysUserThirdBind {
	_sysUserThirdBind := sysUserThirdBind{}

	_sysUserThirdBind.sysUserThirdBindDo.UseDB(db, opts...)
	_sysUserThirdBind.sysUserThirdBindDo.UseModel(&model.SysUserThirdBind{})

	tableName := _sysUserThirdBind.sysUserThirdBindDo.TableName()
	_sysUserThirdBind.ALL = field.NewAsterisk(tableName)
	_sysUserThirdBind.ID = field.NewInt64(tableName, "id")
	_sysUserThirdBind.UserID = field.NewInt64(tableName, "user_id")
	_sysUserThirdBind.LoginType = field.NewString(tableName, "login_type")
	_sysUserThirdBind.Openid = field.NewString(tableName, "openid")
	_sysUserThirdBind.AccessToken = field.NewString(tableName, "access_token")
	_sysUserThirdBind.CreateDept = field.NewInt64(tableName, "create_dept")
	_sysUserThirdBind.CreateBy = field.NewInt64(tableName, "create_by")
	_sysUserThirdBind.CreateTime = field.NewField(tableName, "create_time")
	_sysUserThirdBind.UpdateBy = field.NewInt64(tableName, "update_by")
	_sysUserThirdBind.UpdateTime = field.NewField(tableName, "update_time")
	_sysUserThirdBind.DeleteTime = field.NewField(tableName, "delete_time")

	_sysUserThirdBind.fillFieldMap()

	return _sysUserThirdBind
}

type sysUserThirdBind struct {
	sysUserThirdBindDo

	ALL         field.Asterisk
	ID          field.Int64  // 主键
	UserID      field.Int64  // 用户ID
	LoginType   field.String // 三方登录类型
	Openid      field.String // 三方唯一标识
	AccessToken field.String // 三方Token
	CreateDept  field.Int64  // 创建部门
	CreateBy    field.Int64  // 创建者
	CreateTime  field.Field  // 创建时间
	UpdateBy    field.Int64  // 更新者
	UpdateTime  field.Field  // 更新时间
	DeleteTime  field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (s sysUserThirdBind) Table(newTableName string) *sysUserThirdBind {
	s.sysUserThirdBindDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysUserThirdBind) As(alias string) *sysUserThirdBind {
	s.sysUserThirdBindDo.DO = *(s.sysUserThirdBindDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysUserThirdBind) updateTableName(table string) *sysUserThirdBind {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.UserID = field.NewInt64(table, "user_id")
	s.LoginType = field.NewString(table, "login_type")
	s.Openid = field.NewString(table, "openid")
	s.AccessToken = field.NewString(table, "access_token")
	s.CreateDept = field.NewInt64(table, "create_dept")
	s.CreateBy = field.NewInt64(table, "create_by")
	s.CreateTime = field.NewField(table, "create_time")
	s.UpdateBy = field.NewInt64(table, "update_by")
	s.UpdateTime = field.NewField(table, "update_time")
	s.DeleteTime = field.NewField(table, "delete_time")

	s.fillFieldMap()

	return s
}

func (s *sysUserThirdBind) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysUserThirdBind) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["login_type"] = s.LoginType
	s.fieldMap["openid"] = s.Openid
	s.fieldMap["access_token"] = s.AccessToken
	s.fieldMap["create_dept"] = s.CreateDept
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_by"] = s.UpdateBy
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["delete_time"] = s.DeleteTime
}

func (s sysUserThirdBind) clone(db *gorm.DB) sysUserThirdBind {
	s.sysUserThirdBindDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysUserThirdBind) replaceDB(db *gorm.DB) sysUserThirdBind {
	s.sysUserThirdBindDo.ReplaceDB(db)
	return s
}

type sysUserThirdBindDo struct{ gen.DO }

type ISysUserThirdBindDo interface {
	gen.SubQuery
	Debug() ISysUserThirdBindDo
	WithContext(ctx context.Context) ISysUserThirdBindDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysUserThirdBindDo
	WriteDB() ISysUserThirdBindDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysUserThirdBindDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysUserThirdBindDo
	Not(conds ...gen.Condition) ISysUserThirdBindDo
	Or(conds ...gen.Condition) ISysUserThirdBindDo
	Select(conds ...field.Expr) ISysUserThirdBindDo
	Where(conds ...gen.Condition) ISysUserThirdBindDo
	Order(conds ...field.Expr) ISysUserThirdBindDo
	Distinct(cols ...field.Expr) ISysUserThirdBindDo
	Omit(cols ...field.Expr) ISysUserThirdBindDo
	Join(table schema.Tabler, on ...field.Expr) ISysUserThirdBindDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysUserThirdBindDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysUserThirdBindDo
	Group(cols ...field.Expr) ISysUserThirdBindDo
	Having(conds ...gen.Condition) ISysUserThirdBindDo
	Limit(limit int) ISysUserThirdBindDo
	Offset(offset int) ISysUserThirdBindDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysUserThirdBindDo
	Unscoped() ISysUserThirdBindDo
	Create(values ...*model.SysUserThirdBind) error
	CreateInBatches(values []*model.SysUserThirdBind, batchSize int) error
	Save(values ...*model.SysUserThirdBind) error
	First() (*model.SysUserThirdBind, error)
	Take() (*model.SysUserThirdBind, error)
	Last() (*model.SysUserThirdBind, error)
	Find() ([]*model.SysUserThirdBind, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysUserThirdBind, err error)
	FindInBatches(result *[]*model.SysUserThirdBind, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysUserThirdBind) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysUserThirdBindDo
	Assign(attrs ...field.AssignExpr) ISysUserThirdBindDo
	Joins(fields ...field.RelationField) ISysUserThirdBindDo
	Preload(fields ...field.RelationField) ISysUserThirdBindDo
	FirstOrInit() (*model.SysUserThirdBind, error)
	FirstOrCreate() (*model.SysUserThirdBind, error)
	FindByPage(offset int, limit int) (result []*model.SysUserThirdBind, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysUserThirdBindDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysUserThirdBindDo) Debug() ISysUserThirdBindDo {
	return s.withDO(s.DO.Debug())
}

func (s sysUserThirdBindDo) WithContext(ctx context.Context) ISysUserThirdBindDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysUserThirdBindDo) ReadDB() ISysUserThirdBindDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysUserThirdBindDo) WriteDB() ISysUserThirdBindDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysUserThirdBindDo) Session(config *gorm.Session) ISysUserThirdBindDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysUserThirdBindDo) Clauses(conds ...clause.Expression) ISysUserThirdBindDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysUserThirdBindDo) Returning(value interface{}, columns ...string) ISysUserThirdBindDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysUserThirdBindDo) Not(conds ...gen.Condition) ISysUserThirdBindDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysUserThirdBindDo) Or(conds ...gen.Condition) ISysUserThirdBindDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysUserThirdBindDo) Select(conds ...field.Expr) ISysUserThirdBindDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysUserThirdBindDo) Where(conds ...gen.Condition) ISysUserThirdBindDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysUserThirdBindDo) Order(conds ...field.Expr) ISysUserThirdBindDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysUserThirdBindDo) Distinct(cols ...field.Expr) ISysUserThirdBindDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysUserThirdBindDo) Omit(cols ...field.Expr) ISysUserThirdBindDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysUserThirdBindDo) Join(table schema.Tabler, on ...field.Expr) ISysUserThirdBindDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysUserThirdBindDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysUserThirdBindDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysUserThirdBindDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysUserThirdBindDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysUserThirdBindDo) Group(cols ...field.Expr) ISysUserThirdBindDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysUserThirdBindDo) Having(conds ...gen.Condition) ISysUserThirdBindDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysUserThirdBindDo) Limit(limit int) ISysUserThirdBindDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysUserThirdBindDo) Offset(offset int) ISysUserThirdBindDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysUserThirdBindDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysUserThirdBindDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysUserThirdBindDo) Unscoped() ISysUserThirdBindDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysUserThirdBindDo) Create(values ...*model.SysUserThirdBind) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysUserThirdBindDo) CreateInBatches(values []*model.SysUserThirdBind, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysUserThirdBindDo) Save(values ...*model.SysUserThirdBind) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysUserThirdBindDo) First() (*model.SysUserThirdBind, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysUserThirdBind), nil
	}
}

func (s sysUserThirdBindDo) Take() (*model.SysUserThirdBind, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysUserThirdBind), nil
	}
}

func (s sysUserThirdBindDo) Last() (*model.SysUserThirdBind, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysUserThirdBind), nil
	}
}

func (s sysUserThirdBindDo) Find() ([]*model.SysUserThirdBind, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysUserThirdBind), err
}

func (s sysUserThirdBindDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysUserThirdBind, err error) {
	buf := make([]*model.SysUserThirdBind, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysUserThirdBindDo) FindInBatches(result *[]*model.SysUserThirdBind, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysUserThirdBindDo) Attrs(attrs ...field.AssignExpr) ISysUserThirdBindDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysUserThirdBindDo) Assign(attrs ...field.AssignExpr) ISysUserThirdBindDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysUserThirdBindDo) Joins(fields ...field.RelationField) ISysUserThirdBindDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysUserThirdBindDo) Preload(fields ...field.RelationField) ISysUserThirdBindDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysUserThirdBindDo) FirstOrInit() (*model.SysUserThirdBind, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysUserThirdBind), nil
	}
}

func (s sysUserThirdBindDo) FirstOrCreate() (*model.SysUserThirdBind, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysUserThirdBind), nil
	}
}

func (s sysUserThirdBindDo) FindByPage(offset int, limit int) (result []*model.SysUserThirdBind, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysUserThirdBindDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysUserThirdBindDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysUserThirdBindDo) Delete(models ...*model.SysUserThirdBind) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysUserThirdBindDo) withDO(do gen.Dao) *sysUserThirdBindDo {
	s.DO = *do.(*gen.DO)
	return s
}
